{"name":"Mecacell","tagline":"MecaCell: an Open-source Efficient Cellular Physics Engine","body":"#MecaCell\r\nMecaCell is an open-source cellular physics agent-based simulation platform. It is designed with artificial life and morphogenetic engineering in mind and tries to stay not too invasive, lightweight and easily extensible.\r\nIt comes in the form of two libraries :\r\n- **MecaCell** is the _core_ library which contains everything you need to run simulations in console or with your own viewer. It is written in C++11 and has no dependencies other than the C++ standard library.\r\n- **MecaCellViewer** is a _viewer_ library. It is written in C++, uses OpenGL and depends on Qt5.\r\n  \r\n  \r\n![screenshots](https://raw.githubusercontent.com/jdisset/MecaCell/screens/githubmecacell.jpg)\r\n\r\n\r\n##Install\r\nYou will need cmake 2.8+, a relatively recent C++ compiler (C++11 support is required) and Qt 5.2+\r\n- Clone this repository\r\n- cd in it and create a build directory\r\n- cmake .. && make && make install\r\n\r\n##Basic usage & ultra simple example\r\nYou need at least one **cell type**.\r\n   \r\nYour cell type must inherit from the MecaCell::ConnectableCell (it uses the curriously reccuring template for performances reason, so the inherit line is a little bit more verbose):\r\n```c++\r\nclass MyCell : public MecaCell::ConnectableCell<MyCell> {\r\n```\r\na cell is required to have at least 2 methods:\r\n```c++\r\n\t// returns the adhesion coef (between 0 & 1) with the cell *c\r\n\tdouble getAdhesionWith(const MyCell *c) { return 0.9; }\r\n```\r\n```c++\r\n\t// update routine, called at every loop iteration\r\n\t// returns a pointer to a new cell if division\r\n\t// returns nullptr if not\r\n\tMyCell* updateBehavior(double deltaTime) {\r\n\t\t// access inputs here\r\n\t\treturn nullptr;\r\n\t}\r\n};\r\n```\r\n  \r\n  \r\nLet's now create a scenario:\r\n\r\n```c++\r\nclass MyScenario {\r\n```\r\nA scenario needs to contain a MecaCell::BasicWorld\\<cell_type,integration_mode\\> and let the viewer acces to it:\r\n```c++\r\n\tusing World = MecaCell::BasicWorld<MyCell, MecaCell::Euler>;\r\nprivate:\r\n\tWorld w;\r\n\r\npublic:\r\n\tWorld &getWorld() { return w; }\r\n```\r\n\r\nIt should also contain at least these 2 methods:\r\n```c++\r\n\t// called at initialisation\r\n\tvoid init(int argc, char** argv) {\r\n\t\t// here we just add a cell at (0,0,0);\r\n\t\tw.addCell(new Cell(MecaCell::Vec::zero()));\r\n\t}\r\n```\r\n```c++\r\n\tvoid loop(){\r\n\t\t// this code is called before every frame by the viewer\r\n\t\t// here we just call the world update method, which will handle all the physics\r\n    // and call our MyCell::updateBehavior() method\r\n\t\tw.update();\r\n\t\t// handle events, plug your own methods call, whatever you want goes in this method...\r\n\t}\r\n};\r\n```\r\nNow for the main.cpp:\r\n```c++\r\n#include <mecacell/mecacell.h>\r\n#include <mecacell/viewer/viewer.h>\r\n#include \"myscenario.h\"\r\n#include \"mycell.h\"\r\n\r\nint main(int argc, char **argv) {\r\n\tMecacellViewer::Viewer<MyScenario<MyCell>> v;\r\n\treturn v.exec(argc, argv);\r\n}\r\n\r\n```\r\nThat's it for our extremely basic example. Now you can compile your project (don't forget to link to mecacell library and mecacellviewer + Qt) and run it. You can run it without the viewer by just repeatedly calling yout scenario::loop() method (don't forget to init() first) instead of creating a viewer instance.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}